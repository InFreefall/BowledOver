#pragma config(Sensor, S1, HTIRS2, sensorI2CCustom)
#pragma config(Sensor, S2,     HTSMUX,     sensorLowSpeed)
#pragma config(Hubs,  S3, HTMotor,  none,     none,     none)
#pragma config(Hubs,  S4, HTMotor,  HTMotor,  HTMotor,  HTServo)
#pragma config(Sensor, S3,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S3_C1_1,     shoulder,      tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S3_C1_2,     elbow,         tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S4_C1_1,     motorNorth,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C1_2,     motorEast,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C2_1,     motorWest,     tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S4_C2_2,     motorSouth,    tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S4_C3_1,     motorJ,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C3_2,     wrist,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S4_C4_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S4_C4_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S4_C4_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S4_C4_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S4_C4_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S4_C4_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// These are radians
const int FORWARDS = PI;
const int RIGHT = PI;
const int BACKWARDS = 3*PI/2;
const int LEFT = 2*PI;

// HTMC readings are in degrees. Yay!
const int TURN_TOWARDS_BOARD = 45;

const int DRIVE_FROM_CORNER_TIME = 2400;
const int DISTANCE_FROM_CENTER_RACK = 70;

void setVelocityVector(float magnitude, float theta)
{
  theta -= PI/4; // Make the arm be forwards
  int xPower = magnitude * cos(theta);
  int yPower = magnitude * sin(theta);
  motor[motorWest] = yPower;
  motor[motorEast] = yPower;
  motor[motorNorth] = xPower;
  motor[motorSouth] = xPower;
}

void rotateAtPower(int rotatePower)
{
  motor[motorWest] = -rotatePower;
  motor[motorEast] = rotatePower;
  motor[motorNorth] = rotatePower;
  motor[motorSouth] = -rotatePower;
}

void stopMotors()
{
  motor[motorWest] = 0;
  motor[motorEast] = 0;
  motor[motorNorth] = 0;
  motor[motorSouth] = 0;
}
